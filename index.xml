<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>code’n’roll.it</title>
    <link>https://jploskonka.github.io/</link>
    <description>Recent content on code’n’roll.it</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://github.com/jploskonka&#34;&gt;jploskonka&lt;/a&gt; 2017</copyright>
    <lastBuildDate>Thu, 24 May 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jploskonka.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Fruity guide into web testing salad</title>
      <link>https://jploskonka.github.io/post/fruity-guide-into-web-testing-salad/</link>
      <pubDate>Thu, 24 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jploskonka.github.io/post/fruity-guide-into-web-testing-salad/</guid>
      <description>Unit testing, end to end testing, integration testing, manual, automated, smoke, monkey&amp;hellip; That’s quite a big list of levels and ways to test software. It’s hard to even list them all not even starting to get into details. Why is testing so complex? Why there’s so much ways to achieve so simple on first sight thing like making sure your system works OK? In the end you just want to enter your website and it expect it to work.</description>
    </item>
    
    <item>
      <title>Continuous delivery of Hugo with Docker, CircleCI and Github Pages.</title>
      <link>https://jploskonka.github.io/post/continous_delivery_hugo_circleci/</link>
      <pubDate>Thu, 11 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jploskonka.github.io/post/continous_delivery_hugo_circleci/</guid>
      <description>I&amp;rsquo;m huge fan of Hugo - static site generator written in Go. It powers this blog and it became my go to tool for statically generated webpages. I like Github Pages as place to host such projects for it&amp;rsquo;s simplicity and I&amp;rsquo;m using Github anyway so I don&amp;rsquo;t need to setup separate service for hosting. I&amp;rsquo;m also big fan of automating boring and repetitive tasks and deploying project to Github Pages definitely is not fascinating thing to do.</description>
    </item>
    
    <item>
      <title>How to run application before CodeceptJS tests.</title>
      <link>https://jploskonka.github.io/post/how-to-run-app-with-codecept-js/</link>
      <pubDate>Tue, 21 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jploskonka.github.io/post/how-to-run-app-with-codecept-js/</guid>
      <description>In my last post I was writing about testing TodoMVC application with CodeceptJS. For sake of simplicity I&amp;rsquo;ve used online version of TodoMVC vanillajs example and I&amp;rsquo;ve been running my tests right on the project website. It might&amp;rsquo;ve been good enough for course of the tutorial but it&amp;rsquo;s not very real-world use case—you don&amp;rsquo;t want to mess around with the production environment from your tests. Instead of that it&amp;rsquo;d be good to automatically run the application just before running test suite and then shut it down when testing is done.</description>
    </item>
    
    <item>
      <title>Acceptance testing with CodeceptJS</title>
      <link>https://jploskonka.github.io/post/acceptance-testing-with-codecept-js/</link>
      <pubDate>Fri, 13 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jploskonka.github.io/post/acceptance-testing-with-codecept-js/</guid>
      <description>In this tutorial I&amp;rsquo;m gonna look at CodeceptJS with NightmareJS backend as a tool for writing acceptance tests for TodoMVC application. After completing it you should be familiar with basic codecept concepts and be able to use it in your own projects.
I&amp;rsquo;m using vanillaJS version of TodoMVC available here but probably you can use whatever version you want to—features are supposed to be the same, the only difference may be in HTML selectors of elements user would interact with (although I haven&amp;rsquo;t tested it so can&amp;rsquo;t be sure).</description>
    </item>
    
  </channel>
</rss>